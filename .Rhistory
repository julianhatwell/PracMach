trans <- ifelse(grepl(".pca.", p), "pca", "set")
grepl("pca", p)
p
preds <- gsub("model", "pred", models)
for (p in 1:length(preds)) {
trans <- ifelse(grepl("pca", preds[p]), "pca", "set")
assign(preds[p], predict(get(models[p])
, get(paste0("testing_", trans)))
)
}
library(ggplot2)
library(gridExtra)
g <- ggplot(data = answers, aes(x = id)) +
geom_point(aes(y = answer)
, colour = myPal[1], size = 9, alpha = 0.5) +
theme_bw()
qda_set_ans <- g + geom_point(aes(y = qda_set_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
qda_pca_ans <- g + geom_point(aes(y = qda_pca_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
gbm_set_ans <- g + geom_point(aes(y = gbm_set_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
gbm_pca_ans <- g + geom_point(aes(y = gbm_pca_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
rf_set_ans <- g + geom_point(aes(y = rf_set_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
rf_pca_ans <- g + geom_point(aes(y = rf_pca_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
grid.arrange(qda_set_ans
, qda_pca_ans
, gbm_set_ans
, gbm_pca_ans
, rf_set_ans
, rf_pca_ans)
answers <- data.frame(id = 1:20
, answer = sapply(testing$num_window
, function(nw) {
unique(training[training$num_window == nw
, "classe"])
}
)
, qda_set_pred
, qda_pca_pred
, gbm_set_pred
, gbm_pca_pred
, rf_set_pred
, rf_pca_pred
)
g <- ggplot(data = answers, aes(x = id)) +
geom_point(aes(y = answer)
, colour = myPal[1], size = 9, alpha = 0.5) +
theme_bw()
qda_set_ans <- g + geom_point(aes(y = qda_set_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
qda_pca_ans <- g + geom_point(aes(y = qda_pca_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
gbm_set_ans <- g + geom_point(aes(y = gbm_set_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
gbm_pca_ans <- g + geom_point(aes(y = gbm_pca_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
rf_set_ans <- g + geom_point(aes(y = rf_set_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
rf_pca_ans <- g + geom_point(aes(y = rf_pca_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
grid.arrange(qda_set_ans
, qda_pca_ans
, gbm_set_ans
, gbm_pca_ans
, rf_set_ans
, rf_pca_ans)
answers <- data.frame(id = 1:20
, answer = sapply(testing$num_window
, function(nw) {
unique(training[training$num_window == nw
, "classe"])
}
)
, get(preds[1])
, qda_pca_pred
, gbm_set_pred
, gbm_pca_pred
, rf_set_pred
, rf_pca_pred
)
View(answers)
answers <- data.frame(id = 1:20
, answer = sapply(testing$num_window
, function(nw) {
unique(training[training$num_window == nw
, "classe"])
}
)
, get(preds[1]) = get(preds[1])
, qda_pca_pred
, gbm_set_pred
, gbm_pca_pred
, rf_set_pred
, rf_pca_pred
)
answers <- data.frame(id = 1:20
, answer = sapply(testing$num_window
, function(nw) {
unique(training[training$num_window == nw
, "classe"])
}
)
, get(preds[1]) = get(preds[1])
, qda_pca_pred
, gbm_set_pred
, gbm_pca_pred
, rf_set_pred
, rf_pca_pred
)
answers <- data.frame(id = 1:20
, answer = sapply(testing$num_window
, function(nw) {
unique(training[training$num_window == nw
, "classe"])
}
)
, I(get(preds[1]))
, qda_pca_pred
, gbm_set_pred
, gbm_pca_pred
, rf_set_pred
, rf_pca_pred
)
View(answers)
answers <- data.frame(id = 1:20
, answer = sapply(testing$num_window
, function(nw) {
unique(training[training$num_window == nw
, "classe"])
}
)
, get(preds[1])
, get(preds[2])
, get(preds[3])
, get(preds[4])
, get(preds[5])
, get(preds[6])
)
View(answers)
answers <- data.frame(id = 1:20
, answer = sapply(testing$num_window
, function(nw) {
unique(training[training$num_window == nw
, "classe"])
}
)
, get(preds[1])
, get(preds[2])
, get(preds[3])
, get(preds[4])
, get(preds[5])
, get(preds[6])
)
names(answers)[3:8] <- preds
View(answers)
for (m in 1:length(marks)) {
assign(marks[m], g + geom_point(aes(y = get(preds[m]))
, shape = 15
, colour = myPal[5]
, size = 4))
}
marks <- gsub("model", "marks", models)
g <- ggplot(data = answers, aes(x = id)) +
geom_point(aes(y = answer)
, colour = myPal[1], size = 9, alpha = 0.5) +
theme_bw()
for (m in 1:length(marks)) {
assign(marks[m], g + geom_point(aes(y = get(preds[m]))
, shape = 15
, colour = myPal[5]
, size = 4))
}
grid.arrange(for (m in marks) { get(m) } )
grid.arrange(get(marks[1])
)
assign(marks[m], g
)
marks[m]
marks[1]
assign(marks[1], g)
assign(marks[1], g + geom_point(aes(y = get(preds[m]))
, shape = 15
, colour = myPal[5]
, size = 4))
marks[1]
get(marks[1])
assign(marks[1], g + geom_point(aes(y = I(get(preds[m]))
, shape = 15
, colour = myPal[5]
, size = 4))
assign(marks[1], g + geom_point(aes(y = I(get(preds[m]))
, shape = 15
, colour = myPal[5]
, size = 4)))
g + geom_point(aes(y = I(get(preds[m]))
, shape = 15
, colour = myPal[5]
, size = 4)))
g + geom_point(aes(y = I(get(preds[m])))
, shape = 15
, colour = myPal[5]
, size = 4))
g + geom_point(aes(y = I(get(preds[m])))
, shape = 15
, colour = myPal[5]
, size = 4)
preds[1]
g + geom_point(aes(y = get(paste0("answers$", preds[m])))
, shape = 15
, colour = myPal[5]
, size = 4)
g + geom_point(aes(y = get(paste0("answers$", preds[1])))
, shape = 15
, colour = myPal[5]
, size = 4)
get(paste0("answers$", preds[1]))
answers$gbm_pca_pred
answers[preds[1]]
class(answers[preds[1]])
g + geom_point(aes(y = answers[preds[1]])
, shape = 15
, colour = myPal[5]
, size = 4)
geom_point(aes(y = answers[preds[1]])
, shape = 15
, colour = myPal[5]
, size = 4)
g + geom_point(aes(y = answers[preds[1]])
, shape = 15
, colour = myPal[5]
, size = 4)
ans <- answers[preds[1]]
g + geom_point(aes(y = ans)
)
g <- ggplot(data = answers, aes(x = id)) +
geom_point(aes(y = answer)
, colour = myPal[1], size = 9, alpha = 0.5) +
theme_bw()
g
g + geom_point(y = answers[2])
g + geom_point(y = data.frame(answers[2]))
answers[2]
answers[2][1:6]
answers[2][1:6,]
g + geom_point(y = data.frame(answers[[2]]))
g + geom_point(y = answers[[2]])
g + geom_point(y = answers[,2])
g + geom_point(y = answers[2])
g + geom_point(data = answers, y = preds[1])
g + geom_point(data = answers, y = I(preds[1]))
g + geom_point(data = answers, y = I(preds[1]))
get(preds(1))
get(preds[1]
)
g <- ggplot(data = answers, aes(x = id)) +
geom_point(aes(y = answer)
, colour = myPal[1], size = 9, alpha = 0.5) +
theme_bw()
g
g <- ggplot(data = answers, aes(x = id)) +
geom_point(aes(y = answer)
, colour = myPal[1], size = 9, alpha = 0.5) +
theme_bw() +
geom_point(y = rf_pca_pred)
g
g + geom_point(aes(y = qda_pca_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
g <- ggplot(data = answers, aes(x = id)) +
geom_point(aes(y = answer)
, colour = myPal[1], size = 9, alpha = 0.5) +
theme_bw() +
geom_point(aes(y = rf_pca_pred))
g <- ggplot(data = answers, aes(x = id)) +
geom_point(aes(y = answer)
, colour = myPal[1], size = 9, alpha = 0.5) +
theme_bw() +
geom_point(aes(y = rf_set_pred))
g
library(ggplot2)
library(gridExtra)
g <- ggplot(data = answers, aes(x = id)) +
geom_point(aes(y = answer)
, colour = myPal[1], size = 9, alpha = 0.5) +
theme_bw()
qda_set_ans <- g + geom_point(aes(y = qda_set_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
qda_pca_ans <- g + geom_point(aes(y = qda_pca_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
gbm_set_ans <- g + geom_point(aes(y = gbm_set_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
gbm_pca_ans <- g + geom_point(aes(y = gbm_pca_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
rf_set_ans <- g + geom_point(aes(y = rf_set_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
rf_pca_ans <- g + geom_point(aes(y = rf_pca_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
grid.arrange(qda_set_ans
, qda_pca_ans
, gbm_set_ans
, gbm_pca_ans
, rf_set_ans
, rf_pca_ans)
# Tests
# Enact the EXACT same data cleaning and transformation steps.
# Remove the unwanted columns
testing_set <- cbind(rmUnwantedCols(testing)[, -53], classe = character(20))
# Shift above zero, take the log and perform PCA
# Using only parameters built from the training set
testing_pca <- predict(myPreProc
, myTransform(testing_set))
preds <- gsub("model", "pred", models)
marks <- gsub("model", "marks", models)
for (p in 1:length(preds)) {
trans <- ifelse(grepl("pca", preds[p]), "pca", "set")
assign(preds[p], predict(get(models[p])
, get(paste0("testing_", trans)))
)
}
answers <- data.frame(id = 1:20
, answer = sapply(testing$num_window
, function(nw) {
unique(training[training$num_window == nw
, "classe"])
}
)
, get(preds[1])
, get(preds[2])
, get(preds[3])
, get(preds[4])
, get(preds[5])
, get(preds[6])
)
names(answers)[3:8] <- preds
library(ggplot2)
library(gridExtra)
g <- ggplot(data = answers, aes(x = id)) +
geom_point(aes(y = answer)
, colour = myPal[1], size = 9, alpha = 0.5) +
theme_bw()
qda_set_ans <- g + geom_point(aes(y = qda_set_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
qda_pca_ans <- g + geom_point(aes(y = qda_pca_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
gbm_set_ans <- g + geom_point(aes(y = gbm_set_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
gbm_pca_ans <- g + geom_point(aes(y = gbm_pca_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
rf_set_ans <- g + geom_point(aes(y = rf_set_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
rf_pca_ans <- g + geom_point(aes(y = rf_pca_pred)
, shape = 15
, colour = myPal[5]
, size = 4)
grid.arrange(qda_set_ans
, qda_pca_ans
, gbm_set_ans
, gbm_pca_ans
, rf_set_ans
, rf_pca_ans)
models
qda_set_ans <- g + geom_point(aes(y = qda_set_pred)
, shape = 15
, colour = myPal[5]
, size = 4) +
labs(list(title = models[4], x = "X", y = "Y"))
qda_set_ans
library(ggplot2)
library(gridExtra)
g <- ggplot(data = answers, aes(x = id)) +
geom_point(aes(y = answer)
, colour = myPal[1], size = 8, alpha = 0.5) +
theme_bw()
shp <- 15
sz <- 3
clr <-myPal[5]
gbm_pca_ans <- g + geom_point(aes(y = gbm_pca_pred)
, shape = shp
, colour = clr
, size = sz) +
labs(list(title = models[1], x = "Problem Id", y = "Prediction"))
gbm_set_ans <- g + geom_point(aes(y = gbm_set_pred)
, shape = shp
, colour = clr
, size = sz) +  labs(list(title = models[2], x = "Problem Id", y = "Prediction"))
qda_pca_ans <- g + geom_point(aes(y = qda_pca_pred)
, shape = shp
, colour = clr
, size = sz) +
labs(list(title = models[3], x = "Problem Id", y = "Prediction"))
qda_set_ans <- g + geom_point(aes(y = qda_set_pred)
, shape = shp
, colour = clr
, size = sz) +  labs(list(title = models[4], x = "Problem Id", y = "Prediction"))
rf_pca_ans <- g + geom_point(aes(y = rf_pca_pred)
, shape = shp
, colour = clr
, size = sz) +  labs(list(title = models[5], x = "Problem Id", y = "Prediction"))
rf_set_ans <- g + geom_point(aes(y = rf_set_pred)
, shape = shp
, colour = clr
, size = sz) +  labs(list(title = models[6], x = "Problem Id", y = "Prediction"))
grid.arrange(qda_set_ans
, qda_pca_ans
, gbm_set_ans
, gbm_pca_ans
, rf_set_ans
, rf_pca_ans)
library(ggplot2)
library(gridExtra)
g <- ggplot(data = answers, aes(x = id)) +
geom_point(aes(y = answer)
, colour = myPal[1], size = 7, alpha = 0.5) +
theme_bw()
shp <- 15
sz <- 3
clr <-myPal[5]
gbm_pca_ans <- g + geom_point(aes(y = gbm_pca_pred)
, shape = shp
, colour = clr
, size = sz) +
labs(list(title = models[1], x = "Problem Id", y = "Prediction"))
gbm_set_ans <- g + geom_point(aes(y = gbm_set_pred)
, shape = shp
, colour = clr
, size = sz) +  labs(list(title = models[2], x = "Problem Id", y = "Prediction"))
qda_pca_ans <- g + geom_point(aes(y = qda_pca_pred)
, shape = shp
, colour = clr
, size = sz) +
labs(list(title = models[3], x = "Problem Id", y = "Prediction"))
qda_set_ans <- g + geom_point(aes(y = qda_set_pred)
, shape = shp
, colour = clr
, size = sz) +  labs(list(title = models[4], x = "Problem Id", y = "Prediction"))
rf_pca_ans <- g + geom_point(aes(y = rf_pca_pred)
, shape = shp
, colour = clr
, size = sz) +  labs(list(title = models[5], x = "Problem Id", y = "Prediction"))
rf_set_ans <- g + geom_point(aes(y = rf_set_pred)
, shape = shp
, colour = clr
, size = sz) +  labs(list(title = models[6], x = "Problem Id", y = "Prediction"))
grid.arrange(qda_set_ans
, qda_pca_ans
, gbm_set_ans
, gbm_pca_ans
, rf_set_ans
, rf_pca_ans)
rm(list = ls())
library(knitr)
knit_theme$get("edit-xcode")
k <- knit_theme$get("edit-xcode")
k <- knit_theme$get("edit-xcode", format == "HTML")
install.packages("AppliedPredictiveModeling")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
