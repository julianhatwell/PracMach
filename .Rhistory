download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv", "gaData.csv")
library(lubridate) # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
names(dat)
range(dat$date)
summary(dat$date)
dat$date[1]
install.packages("forecast")
batty <- bats(tstrain)
library(forecast)
batty <- bats(tstrain)
b <- predict(batty, testing)
batty$fitted.values
tstest <- ts(testing$visitsTumblr)
predict(batty, tstest)
plot(forecast(batty))
length(training)
nrows(training)
nrow(training)
nrow(testing)
forecast(batty, h = 235)
plot(forecast(batty, h = 235))
lines(testing$date, testing$visitsTumblr)
head(forecast(batty, h = 235))
fc <- forecast(batty, h = 235)
inBounds <- (testing$visitsTumblr > fc$lower & testing$visitsTumblr < fc$upper)
mean(inBounds)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
install.packages("e1071")
set.seed(325)
q5 <- train(CompressiveStrength~., data = concrete, method = "svm")
q5 <- svm(CompressiveStrength~., data = concrete, method = "svm")
library(e1071)
q5 <- svm(CompressiveStrength~., data = concrete, method = "svm")
q5_p <- predict(q5, testing)
sqrt(sum((q5_p - testing$CompressiveStrength)^2))
sqrt(mean((q5_p - testing$CompressiveStrength)^2))
#install.packages("e1071")
library("e1071")
set.seed(325)
conc.fit.svm = svm(CompressiveStrength ~ .,
data=training)
# comparing predictions to actual values
conc.pred.svm = predict(conc.fit.svm, newdata = testing)
# Root Mean Squared Error
error = conc.pred.svm - testing$CompressiveStrength
sqrt(mean(error^2))
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
q5 <- svm(CompressiveStrength~., data = training, method = "svm")
sqrt(mean((q5_p - testing$CompressiveStrength)^2))
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
q5 <- svm(CompressiveStrength~., data = training)
q5_p <- predict(q5, testing)
sqrt(mean((q5_p - testing$CompressiveStrength)^2))
table(inBounds)
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv", "gaData.csv")
library(lubridate) # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
batty <- bats(tstrain)
nrow(testing)
batty.forecast <- forecast(batty, nrow(testing))
plot(batty.forecast)
plot(forecast(batty, h = 235))
batty.forecast <- forecast(batty, h = nrow(testing))
plot(batty.forecast)
head(batty.forecast$lower)
plot(batty.forecast)
lines(testing$date, testing$visitsTumblr)
inBounds <- (testing$visitsTumblr > fc$lower[,2] &
testing$visitsTumblr < fc$upper[,2])
mean(inBounds)
table(inBounds)
#Q1
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
rnfr <- train(y~., data=vowel.train, method = "rf")
gboo <- train(y~., data=vowel.train, method = "gbm")
rnfr_p <- predict(rnfr, vowel.test)
gboo_p <- predict(gboo, vowel.test)
rnfr_c <- confusionMatrix(rnfr_p, vowel.test$y)
gboo_c <- confusionMatrix(gboo_p, vowel.test$y)
agac <- confusionMatrix(rnfr_p, gboo_p)
rnfr_c$overall[1]
gboo_c$overall[1]
agac$overall[1]
